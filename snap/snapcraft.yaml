name: ps-printer-app
base: core20
version: '1.0'
summary: PostScript Printer Application
description: |
  The PostScript Printer Application is a PAPPL (Printer Application Framework) based Printer Application
  to support PostScript printers.
  PAPPL is a simple C-based framework/library for developing
  Printer Applications, which are the recommended replacement for
  printer drivers.

grade: stable
confinement: strict

# Only build on the architectures supported
architectures:
  - build-on: amd64
  - build-on: arm64
  - build-on: armhf

apps:
  ps-printer-app-server:
    command: scripts/run-ps-printer-app-server
    daemon: simple
    # Use a systemd timeout longer than 1 min as PAPPL has a 1-minute
    # shutdown timeout if there are pending jobs for which the printer
    # is not responding. This way we avoid the Printer Application
    # getting killed and shut down uncleanly.
    stop-timeout: 70s
    plugs: [avahi-control, home, network, network-bind, raw-usb]
  ps-printer-app:
    command: scripts/run-ps-printer-app
    plugs: [avahi-control, home, network, network-bind, raw-usb]

parts:
  pappl:
    source: https://github.com/michaelrsweet/pappl
    source-type: git
    plugin: autotools
    override-build: |
      set -eux
      # Raise the supported number of vendor-specific options/attributes in
      # PAPPL to 256, as the original 32 can be too small for some busy PPD
      # files
      perl -p -i -e 's/(define\s+PAPPL_MAX_VENDOR\s+)32/\1 256/' pappl/printer.h
      # De-activate log-rotating. It does not work with the forked processes
      # of the filters
      perl -p -i -e 's/(system->logmaxsize\s+=).*/\1 0;/' pappl/system.c
      # As we do not use PAPPL's own backends but the CUPS backends using the
      # "cups" device scheme of pappl-retrofit, we let the manual "Network
      # Printer" device on the "Add Printer" page of the web interface use a
      # "cups:socket://..." URI instead of simply "socket://..."
      perl -p -i -e 's/(httpAssembleURI\(.*?)"socket"(.*?\))/\1"cups:socket"\2/' pappl/system-webif.c
      # PAPPL's build system does not insert the LDFLAGS when linking.
      # Patching Makedefs.in to fix this
      perl -p -i -e 's/^(\s*DSOFLAGS\s*=\s*\S*\s+)/\1\$\(LDFLAGS\) /' Makedefs.in
      snapcraftctl build
    autotools-configure-parameters:
      - --prefix=/usr
      - --with-papplstatedir=/var/snap/ps-printer-app/common
      - --with-papplsockdir=/var/snap/ps-printer-app/common/tmp
      - --enable-libjpeg
      - --enable-libpng
      - --enable-libusb
      - --with-dnssd=avahi
    build-packages:
      - libavahi-client-dev
      - libgnutls28-dev
      - libjpeg-dev
      - libpam0g-dev
      - libpng-dev
      - libusb-1.0-0-dev
      - zlib1g-dev
      - perl-base
    stage-packages:
      - libavahi-client3
      - libpng16-16
      - libusb-1.0-0
    prime:
      - -etc/fonts
      - -var
      - lib/*/lib*.so*
      - usr/lib/lib*.so*
      - usr/lib/*/lib*.so*
      - -usr/include
      - -usr/lib/pkgconfig
      - -usr/share/fonts
      - -usr/share/man
      - -usr/share/doc
      - -usr/share/doc-base
      - -usr/share/lintian
      - -snap
    after: [cups]

  pappl-retrofit:
    source: https://github.com/openprinting/pappl-retrofit
    source-type: git
    plugin: autotools
    autotools-configure-parameters:
      - --prefix=/usr
    # To find the libraries built in this Snap
    build-environment:
      - LD_LIBRARY_PATH: "${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$SNAPCRAFT_STAGE/usr/lib/x86_64-linux-gnu"
    build-packages:
      - autoconf
      - automake
      - libtool
      - autotools-dev
      - pkg-config
      - perl-base
    stage-packages:
      - libusb-1.0-0
    organize:
      usr/share/legacy-printer-app/testpage.pdf: usr/share/ps-printer-app/testpage.pdf
    prime:
      - lib/*/lib*.so*
      - usr/lib/lib*.so*
      - usr/lib/*/lib*.so*
      - usr/share/ps-printer-app/testpage.pdf
      - -var
      - -usr/bin/legacy-printer-app
      - -usr/include
      - -usr/lib/pkgconfig
      - -usr/lib/legacy-printer-app
      - -usr/share/legacy-printer-app
      - -usr/share/fonts
      - -usr/share/man
      - -usr/share/doc
      - -usr/share/doc-base
      - -usr/share/lintian
      - -snap
    after: [cups, pappl, libcupsfilters, libppd]

  qpdf:
    source: https://github.com/qpdf/qpdf/releases/download/v11.3.0/qpdf-11.3.0.tar.gz
    plugin: cmake
    cmake-parameters:
      - -DCMAKE_INSTALL_PREFIX=/usr
      - -DCMAKE_BUILD_TYPE=RelWithDebInfo
    build-packages:
      - g++
      - zlib1g-dev
    stage-packages:
      - libjpeg-turbo8
    stage:
      # The *.la file which gets installed by "make install" contains a
      # wrong prefix, breaking parts of this Snap which use this library
      - -usr/lib/lib*.la
    prime:
      - lib/*/lib*.so*
      - usr/lib/lib*.so*
      - usr/lib/*/lib*.so*
      - -etc/fonts
      - -var
      - -usr/include
      - -share/man
      - -share/doc
      - -share/lintian
      - -usr/share/fonts
      - -usr/share/man
      - -usr/share/doc
      - -usr/share/doc-base
      - -usr/share/lintian
      - -usr/lib/libqpdf.a
      - -usr/lib/libqpdf.la
      - -usr/lib/pkgconfig

  ghostscript:
    source: https://github.com/ArtifexSoftware/ghostpdl-downloads/releases/download/gs1000/ghostscript-10.0.0.tar.gz
    plugin: autotools
    # We only need PostScript output, for converting PDF input
    autotools-configure-parameters:
      - --prefix=/usr
      - --without-x
      - --disable-gtk
      - --with-drivers=ps2write
      - --enable-freetype
      - --without-tesseract
      - --datarootdir=/snap/ps-printer-app/current/usr/share/
    stage-packages:
      - libpaper1
      - libfontconfig1
      - libfreetype6
      - libpng16-16
    prime:
      - usr/bin/gs
      - lib/*/lib*.so*
      - usr/lib/*/lib*.so*
      - usr/share/ghostscript
      - -etc/fonts
      - -var
      - -usr/include
      - -usr/lib/pkgconfig
      - -usr/share/fonts
      - -usr/share/man
      - -usr/share/doc
      - -usr/share/doc-base
      - -usr/share/lintian
      - -snap
    organize:
      snap/ps-printer-app/current/usr/share: usr/share
    after: [cups]

  cups:
    source: https://github.com/OpenPrinting/cups
    source-type: git
    plugin: autotools
    # We only need libcups (with headers, ...) and the backends
    override-build: |
      set -eux
      patch -p1 < $SNAPCRAFT_PROJECT_DIR/snap/local/cups-dnssd-backend-socket-only.patch
      # We use "--with-tls=gnutls" here, as current CUPS defaults to SSL here
      # and this is buggy, causing a segfault when serving out a HTTPS web
      # interface page.
      ./configure --sysconfdir=/var/snap/ps-printer-app/common/ --with-tls=gnutls
      cd cups
      make
      cd ..
      cd backend
      # Have USB quirk files in user-modifiable space for debugging
      perl -p -i -e 's/"CUPS_DATADIR"/"USB_QUIRK_DIR"/' usb-libusb.c
      make snmp dnssd socket ipp ipps lpd usb
      cd ..
      mkdir -p $SNAPCRAFT_PART_INSTALL/usr/lib
      cp cups/libcups*.a $SNAPCRAFT_PART_INSTALL/usr/lib/
      cp cups/libcups*.so* $SNAPCRAFT_PART_INSTALL/usr/lib/
      mkdir -p $SNAPCRAFT_PART_INSTALL/usr/include/cups
      cp cups/*.h $SNAPCRAFT_PART_INSTALL/usr/include/cups/
      mkdir -p $SNAPCRAFT_PART_INSTALL/usr/bin
      cp cups-config $SNAPCRAFT_PART_INSTALL/usr/bin/
      mkdir -p $SNAPCRAFT_PART_INSTALL/usr/lib/ps-printer-app/backend/
      ( cd backend; \
        cp snmp dnssd socket ipp ipps lpd usb org.cups.usb-quirks $SNAPCRAFT_PART_INSTALL/usr/lib/ps-printer-app/backend/ \
      )
      cp conf/snmp.conf $SNAPCRAFT_PART_INSTALL/usr/lib/ps-printer-app/backend/
      #snapcraftctl build
    build-packages:
      - patch
      - gettext
      - autoconf
      - automake
      - libtool
      - autotools-dev
      - pkg-config
      - libavahi-client-dev
      - libavahi-common-dev
      - libavahi-compat-libdnssd-dev
      - libdbus-1-dev
      - libfontconfig1-dev
      - libfreetype6-dev
      - libgnutls28-dev
      - libjpeg-dev
      - libldap2-dev
      - libkrb5-dev
      - libpam0g-dev
      - libpaper-dev
      - libpng-dev
      - libusb-1.0-0-dev
      - perl-base
    stage-packages:
      - libusb-1.0-0
      - libavahi-common3
      - libavahi-client3
      - libicu66
      - libjson-glib-1.0-0
      - libsoup2.4-1
      - libxml2
    prime:
      - -etc/fonts
      - -var
      - -usr/include
      - -usr/lib/pkgconfig
      - -usr/share/fonts
      - -usr/share/man
      - -usr/share/doc
      - -usr/share/doc-base
      - -usr/share/lintian
      - lib/*/lib*.so*
      - usr/lib/lib*.so*
      - usr/lib/*/lib*.so*
      - usr/lib/ps-printer-app/backend/*

  libcupsfilters:
    source: https://github.com/OpenPrinting/libcupsfilters
    source-type: git
    plugin: autotools
    # We only need libcupsfilters itself. so we simply do not prime the
    # auxiliary files (/usr/share)
    autotools-configure-parameters:
      - --prefix=/usr
      - --disable-avahi
      - --disable-mutool
    # To find the libraries built in this Snap
    build-environment:
      - LD_LIBRARY_PATH: "${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$SNAPCRAFT_STAGE/usr/lib"
    build-packages:
      - gettext
      - autoconf
      - automake
      - autotools-dev
      - pkg-config
      - g++
      - sharutils
      - liblcms2-dev
      - libpoppler-cpp-dev
      - libpng-dev
      - libjpeg-dev
      - libtiff5-dev
      - zlib1g-dev
      - libfontconfig1-dev
      - libdbus-1-dev
      - libexif-dev
    stage-packages:
      - libpoppler-cpp0v5
      - libjbig0
      - liblcms2-2
      - libnspr4
      - libnss3
      - libopenjp2-7
      - libpoppler97
      - libtiff5
      - libwebp6
      - libexif12
    stage:
      # The *.la file which gets installed by "make install" contains a
      # wrong prefix, breaking parts of this Snap which use this library
      - -usr/lib/lib*.la
    prime:
      - -etc
      - -var
      - -usr/include
      - -usr/lib/pkgconfig
       - usr/share/cups
      - -usr/share/fonts
      - -usr/share/man
      - -usr/share/doc
      - -usr/share/doc-base
      - -usr/share/lintian
      - lib/*/lib*.so*
      - usr/lib/lib*.so*
      - usr/lib/*/lib*.so*
      - usr/lib/*/nss
    after: [cups, qpdf, ghostscript]

  libppd:
    source: https://github.com/OpenPrinting/libppd
    source-type: git
    plugin: autotools
    # We only need libppd itself, so we also do not prime the auxiliary files
    # here.
    autotools-configure-parameters:
      - --prefix=/usr
      - --disable-mutool
      - --disable-pdftocairo
      - --disable-acroread
      - --with-pdftops-path=/snap/ps-printer-app/current/usr/bin/pdftops
    # To find the libraries built in this Snap
    build-environment:
      - LD_LIBRARY_PATH: "${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$SNAPCRAFT_STAGE/usr/lib"
    build-packages:
      - gettext
      - autoconf
      - automake
      - autotools-dev
      - pkg-config
      - g++
      - sharutils
      - poppler-utils
    prime:
      - -etc
      - -var
      - -usr/include
      - -usr/lib/pkgconfig
      - -usr/share/ppdc
      - -usr/share/fonts
      - -usr/share/man
      - -usr/share/doc
      - -usr/share/doc-base
      - -usr/share/lintian
      - lib/*/lib*.so*
      - usr/lib/lib*.so*
      - usr/lib/*/lib*.so*
      - usr/lib/*/nss
    after: [cups, ghostscript, libcupsfilters]

  cups-filters:
    source: https://github.com/OpenPrinting/cups-filters
    source-type: git
    plugin: autotools
    # To find the libraries built in this Snap
    build-environment:
      - LD_LIBRARY_PATH: "${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$SNAPCRAFT_STAGE/usr/lib/x86_64-linux-gnu"
    # We only need pdftops and foomatic-rip (for PIN-protected printing
    # on Ricoh and OEM)
    override-build: |
      set -eux
      ./autogen.sh
      ./configure --disable-mutool
      make foomatic-rip
      make pdftops
      mkdir -p $SNAPCRAFT_PART_INSTALL
      cp foomatic-rip $SNAPCRAFT_PART_INSTALL
      cp pdftops $SNAPCRAFT_PART_INSTALL
      #snapcraftctl build
    build-packages:
      - gettext
      - autoconf
      - automake
      - autotools-dev
      - pkg-config
      - g++
      - sharutils
    stage-packages:
      - poppler-utils
    organize:
      foomatic-rip: usr/lib/ps-printer-app/filter/foomatic-rip
      pdftops: usr/lib/ps-printer-app/filter/pdftops
    prime:
      - -etc/fonts
      - -var
      - -usr/include
      - -usr/lib/pkgconfig
      - -usr/share/fonts
      - -usr/share/man
      - -usr/share/doc
      - -usr/share/doc-base
      - -usr/share/lintian
      - lib/*/lib*.so*
      - usr/lib/lib*.so*
      - usr/lib/*/lib*.so*
      - usr/lib/*/nss
      - usr/bin/pdftops
      - usr/lib/ps-printer-app
    after: [cups, ghostscript, libcupsfilters, libppd]

  pyppd:
    source: https://github.com/OpenPrinting/pyppd
    source-type: git
    plugin: python
    override-prime: ""

  foomatic-db:
    source: https://github.com/OpenPrinting/foomatic-db
    source-type: git
    plugin: nil
    override-build: |
      set -eux
      # Remove non-PostScript manufacturer PPD files
      rm -rf db/source/PPD/*/PDF
      rm -rf db/source/PPD/*/PXL
      rm -rf db/source/PPD/*/PCL5
      # Remove executable bits from PPD files
      find db/source/PPD -executable -type f -print0 | xargs -0 chmod -x || :
      # Remove non-PPD files from PPD file directories
      find db/source/PPD -type f \! -name '*.ppd' -print0 | xargs -0 rm || :
      # Correct common errors in PPD files: "*CloseUI" without ':' and
      # "*1284DeviceId" instead of "*1284DeviceID"
      for f in `find db/source/PPD -name '*.ppd'`; do perl -p -i -e 's/^\*CloseUI(\s+)/*CloseUI:\1/' $f; perl -p -i -e 's/\*1284DeviceId/*1284DeviceID/' $f; done
      # Compress the PostScript PPDs in a self-extracting archive
      $SNAPCRAFT_STAGE/bin/pyppd -v -o $SNAPCRAFT_PART_INSTALL/foomatic-ps-ppds db/source/PPD
      snapcraftctl build
    build-packages:
      - perl-base
      - python3
      - xz-utils
    stage-packages:
      - python3
      - xz-utils
    organize:
      foomatic-ps-ppds: usr/share/ppd/foomatic-ps-ppds
    stage:
      - usr/bin
      - usr/share/ppd
    prime:
      - usr/bin/xz
      - -usr/bin/pdb3
      - -usr/bin/pydoc3
      - -usr/bin/pygettext3
      - usr/share/ppd
    after: [pyppd]

  hplip:
    # We need only the PostScript printer PPD files and the hpps
    # filter executable (for support for PIN-secured printing). We
    # clean up the PPDs from some common errors and as the hpps
    # executable is very simple, we do not run "./configure; make;
    # make install" but call gcc directly instead.
    #
    # We use the Debian package source instead of the upstream source code
    # of HPLIP as the Debian package has ~80 patches fixing bugs which are
    # reported upstream but the patches not adopted upstream.
    # This way we should have the same user experience in terms of reliability
    # and quality as with the Debian package.
    # Note that the repository has all patches already applied, so we do
    # not need to apply them before building.
    # Debian source
    source: https://salsa.debian.org/printing-team/hplip.v2.git
    source-type: git
    source-branch: debian/3.22.6+dfsg0-1
    # Upstream source
    #source: https://sourceforge.net/projects/hplip/files/hplip/3.22.6/hplip-3.22.6.tar.gz
    plugin: nil
    override-build: |
      set -eux
      cd prnt/hpps
      touch config.h
      gcc -o hpps *.c -I. -I$SNAPCRAFT_STAGE/usr/include/ -L$SNAPCRAFT_STAGE/usr/lib/ -lcups
      rm config.h
      cd ../..
      mkdir -p $SNAPCRAFT_PART_INSTALL
      cp prnt/hpps/hpps $SNAPCRAFT_PART_INSTALL
      # Remove executable bits from PPD files
      find prnt/ps -executable -type f -print0 | xargs -0 chmod -x || :
      # Remove non-PPD files from PPD file directories
      find prnt/ps -type f \! -name '*.ppd*' -print0 | xargs -0 rm || :
      # Unzip the PPD files (for upstream source)
      # find prnt/ps -type f -name '*.ppd.gz' -print0 | xargs -0 gunzip || :
      # Correct common errors in PPD files: "*CloseUI" without ':' and
      # "*1284DeviceId" instead of "*1284DeviceID"
      for f in `find prnt/ps -name '*.ppd'`; do perl -p -i -e 's/^\*CloseUI(\s+)/*CloseUI:\1/' $f; perl -p -i -e 's/\*1284DeviceId/*1284DeviceID/' $f; done
      # Compress the PostScript PPDs in a self-extracting archive
      $SNAPCRAFT_STAGE/bin/pyppd -v -o $SNAPCRAFT_PART_INSTALL/hplip-ps-ppds prnt/ps
      snapcraftctl build
    build-packages:
      - perl-base
      - python3
      - xz-utils
    stage-packages:
      - python3
      - xz-utils
    organize:
      hplip-ps-ppds: usr/share/ppd/hplip-ps-ppds
      hpps: usr/lib/ps-printer-app/filter/hpps
    stage:
      - usr/bin
      - usr/share/ppd
      - usr/lib/ps-printer-app
    prime:
      - usr/bin/xz
      - -usr/bin/pdb3
      - -usr/bin/pydoc3
      - -usr/bin/pygettext3
      - usr/share/ppd
      - usr/lib/ps-printer-app
    after: [cups, pyppd]

  ps-printer-app:
    plugin: make
    source: .
    make-parameters:
      - LDFLAGS="$LDFLAGS -ljpeg"
    # To find the libraries built in this Snap
    build-environment:
      - LD_LIBRARY_PATH: "${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$SNAPCRAFT_STAGE/usr/lib/x86_64-linux-gnu"
    # To improve convenience for developers (and everyone who wants to
    # build from source), we do a "make clean" before "make" here,
    # because if we had done "make" off-Snap, directly in the source
    # tree and afterwards build the Snap with snapcraft, the build
    # sucks in our local binary of ps-printer-app instead of
    # compiling its own one in the Snap harness with the appropriate
    # libraries, ending up with the Snap containing an executable
    # which does not work inside the Snap. The "make clean" removes
    # any accidentally grabbed binary.
    override-build: |
      set -eux
      make clean
      snapcraftctl build
    build-packages:
      - libusb-1.0-0-dev
    stage-packages:
      - libusb-1.0-0
      - libjbig0
      - liblcms2-2
      - libtiff5
      - libwebp6
    stage:
      - -usr/lib/ps-printer-app
    prime:
      - usr/bin/ps-printer-app
      - lib/*/lib*.so*
      - usr/lib/*/lib*.so*
      - usr/share/ps-printer-app
      - usr/share/ppd
      - -var
      - -usr/share/man
    after: [pappl-retrofit, pappl, libcupsfilters, libppd, cups-filters, foomatic-db, hplip]

  scripts:
    plugin: dump
    source: snap/local/
    organize:
      run-ps-printer-app*: scripts/
    prime:
      - scripts/
    after: [ps-printer-app]
